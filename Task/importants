// DSATABSE STORED IN TABULAR AND JSON FORMAT SO THAT WE CAN EASILY ACESS



// --------------------------------------------SQL------------------------------------
// SQL = STRUCTURED QUERY LANGUAGE
// SQL = RELATIONAL DATABASE-> RELATIONSHIP BETWEEN TABLES
// SQL = TABLES
// SQL = MYSQL, POSTGRESQL, ORACLE
// SQL IS USED FOR TRANSACTIONAL DATABASES
// SQL  HAS FIXED SCHEMA
// SCHEMA-> BLUEPRINT OF THE DATABASE THAT DEFINES THE STRUCTURE OF THE DATABASE 
// SCHEMA-> TABLES, COLUMNS, DATA TYPES, RELATIONSHIPS
// SQL = 

// --------------------------------------------NO SQL----------------------------------
// NOSQL = NOT STRUCTURED QUERY LANGUAGE
// NOSQL = NON-RELATIONAL DATABASE -> NO RELATIONSHIP BETWEEN TABLES
// NOSQL IS USED FOR NON-TRANSACTIONAL DATABASES
// NOSQL = MONGODB, FIREBASE, COUCHDB
// NOSQL = COLLECTIONS
// NOSQL = JSON FORMAT

// -----------------------------------------BJSON----------------------------------------
// BJSON = BINARY JSON
// JSON = JAVASCRIPT OBJECT NOTATION
// -----------------------------------------JSON BJSON-------------------------------------------
                                           // DATATYPES:
 //  JSON
// STRING
// NUMBER
// BOOLEAN
// null
// Array
// Object

// BSON
// STRING
// DOUBLE
// 32 BIT INTEGER
// 64 BIT INTEGER
// REGULAR EXPRESSION
// TIMESTAMP
// Date
// OBJECT ID
// BOOLEAN
// null
// Array
// Object
                                        //    FORMAT
// JSON
// TEXT BASED (HUMAN READABLE)


// BSON 
//  BINARY BASED (NOT HUMAN READABLE)
//  BSON IS FASTER THAN JSON
//  BSON IS MORE EFFICIENT THAN JSON
                                       //    SIZE
// 
// LARGE DUE TO TEXT OVERHEAD

// BSON
//  BSON IS MORE COMPACT THAN JSON

                                      //    SPEED
// JSON
// SLOWER TO PARSE AND GENERATE
// BSON
// FASTER  TO PARSE AND GENERATE
                                    //   USAGE
// JSON
//  USED FOR DATA EXCHANGE BETWEEN SERVER AND CLIENT AND FOR STORING DATA IN FILES
// BSON
// MONGODB AND DATABSE STORAGE WITH RICH SET OF DATA TYPES

                                      


// ------------------------------------   MONGODB  --------------------------------------
// -> NO SQL DATABASE





















//  PEXELS
// DEVUI
// in app like if we login one time it will take us to dashboard until we logout so how to do this using firebase



// react-routing => browserRoter
// ---------------------------------------------------friebase
// npm install firebase
// copy the config
// import { getAuth } from "firebase/auth";
// import {getDataBase} from "firebase/database";

// const app = initializeApp(firebaseConfig);
// const auth = getAuth(app);
// const database = getDataBase(app);

// export { auth, database };
// ----------------------------------------------------------------------------FOR TAILWIND
// npm install -D tailwindcss postcss autoprefixer

// npx tailwindcss init -p

// /** @type {import('tailwindcss').Config} */
// module.exports = {
//   content: [
//     "./index.html",
//     "./src/**/*.{js,ts,jsx,tsx}",
//   ],
//   theme: {
//     extend: {},
//   },
//   plugins: [],
// }

// @import "tailwindcss";

// ------------------------------------FOR VITE ----------------------------------
// npm create vite@latest

// ------------------------------------REACT ROUTER INSTALLATION----------------------------------
// npm i react-router-dom
// ----------------------------------------------------------
{/* <link> === a 
when we use  a tag it will
refresh the whole page */}

{/* <NavLink></NavLink> */}
// we write to in this


// ------------------------------------redux_Toolkit----------------------------------
// npm install @reduxjs/toolkit react-redux
// npm install react-redux
// in store you have to make a folder calle createSlice(logic of the app) and then you have to make 
// a folder called reducer(logic of the app)




// ------------------------------------redux
// npm i react-redux redux
// /we use redux because we want to share the state between the components 
// without facing prop drilling problem 
//actions , reducers , storecreate

// make a store.js file

// // import { configureStore } from '@reduxjs/toolkit';

// import {configureStore, configureSTore} from '@reduxjs/toolkit'
// import todoReducer from '../features/todo/todoSlice'
// export const store = configureStore({
//     reducer:todoReducer
// })

// ---useState
// 1)when state changed
// 2)when prop change


// -------reducers
// we pass function in the reducers

// npm = node package manager
// npx = node package executor
// npm run dev and npm run start diff




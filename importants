// PEXELS
// DEVUI
// in app like if we login one time it will take us to dashboard until we logout so how to do this using firebase



// react-routing => browserRoter
// -------------------friebase
// npm install firebase
// copy the config
// import { getAuth } from "firebase/auth";
// import {getDataBase} from "firebase/database";

// const app = initializeApp(firebaseConfig);
// const auth = getAuth(app);
// const database = getDataBase(app);

// export { auth, database };
// ----------------------------------------------------------------------------FOR TAILWIND
// npm install -D tailwindcss postcss autoprefixer

// npx tailwindcss init -p

// /** @type {import('tailwindcss').Config} */
// module.exports = {
//   content: [
//     "./index.html",
//     "./src/**/*.{js,ts,jsx,tsx}",
//   ],
//   theme: {
//     extend: {},
//   },
//   plugins: [],
// }

// @import "tailwindcss";

// ------------------------------------FOR VITE ----------------------------------
// npm create vite@latest

// ------------------------------------REACT ROUTER INSTALLATION----------------------------------
// npm i react-router-dom
// ----------------------------------------------------------
{/* <link> === a 
when we use  a tag it will
refresh the whole page */}

{/* <NavLink></NavLink> */}
// we write to in this


// ------------------------------------redux_Toolkit----------------------------------
// npm install @reduxjs/toolkit react-redux
// npm install react-redux
// in store you have to make a folder calle createSlice(logic of the app) and then you have to make 
// a folder called reducer(logic of the app)




// ------------------------------------redux
// npm i react-redux redux
// /we use redux because we want to share the state between the components 
// without facing prop drilling problem 
//actions , reducers , storecreate

// make a store.js file

// // import { configureStore } from '@reduxjs/toolkit';

// import {configureStore, configureSTore} from '@reduxjs/toolkit'
// import todoReducer from '../features/todo/todoSlice'
// export const store = configureStore({
//     reducer:todoReducer
// })

// ---useState
// 1)when state changed
// 2)when prop change


// -------reducers
// we pass function in the reducers



